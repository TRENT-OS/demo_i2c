/*
 * Copyright (C) 2021-2024, HENSOLDT Cyber GmbH
 * 
 * SPDX-License-Identifier: GPL-2.0-or-later
 *
 * For commercial licensing, contact: info.cyber@hensoldt.net
 */

#pragma once

#include "include/if_I2C.camkes"

/*
* Declare the I2C driver component:
*/
#define I2C_COMPONENT_DEFINE( \
_type_, \
_dtb_name_ \
) \
\
component _type_ { \
    provides    if_I2C      i2c_rpc; \
    dataport    Buf         i2c_port; \
    \
    emits       Dummy       hw_src; \
    consumes    Dummy       dev; \
    \
    HARDWARE_I2C_INTERFACES \
    \
    composition { \
        connection seL4DTBHardware con_hw(from hw_src, to dev); \
        HARDWARE_I2C_COMPOSITION \
    } \
    \
    configuration { \
        dev.dtb = dtb(_dtb_name_); \
        dev.generate_interrupts = 1; \
        HARDWARE_I2C_CONFIG \
    } \
}

//------------------------------------------------------------------------------

// platform specific I2C details
#include "plat_i2c.camkes"

/*
* Assign client interface:
*
*      I2C_INSTANCE_CONNECT_CLIENT(
*          <instance>,
*          <storage>.<rpc>, <storage>.<port>
*      )
*/
#define I2C_INSTANCE_CONNECT_CLIENT( \
_inst_, \
_peer_inst_rpc_, \
_peer_inst_port_) \
\
connection  seL4RPCCall \
    _inst_ ## _i2c_rpc( \
        from  _peer_inst_rpc_, \
        to    _inst_.i2c_rpc \
    ); \
\
connection  seL4SharedData \
    _inst_ ## _i2c_port( \
        from  _peer_inst_port_, \
        to    _inst_.i2c_port \
    );
